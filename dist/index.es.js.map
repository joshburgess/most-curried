{"version":3,"file":"index.es.js","sources":["../src/index.js"],"sourcesContent":["/** @license MIT License (c) copyright 2016 Josh Burgess, mostjs */\r\n\r\nimport * as Most from 'most'\r\nimport { curry2, curry3 } from '@most/prelude'\r\n\r\n// @deprecated (not exported due to being deprecated)\r\n\r\n// Use `awaitPromises` instead of `await`\r\n// Use `chain` instead of `flatMap`\r\n// Use `continueWith` instead of `flatMapEnd`\r\n// Use `switchLatest` instead of `switch`\r\n// Use `skipRepeats` instead of `distinct`\r\n// Use `skipRepeatsWith` instead of `distinctBy`\r\n// Use `until` instead of `takeUntil`\r\n// Use `since` instead of `skipUntil`\r\n\r\n\r\n// defaultScheduler instance (exported directly without changes)\r\nconst defaultScheduler = Most.defaultScheduler\r\n\r\n\r\n// @unary functions (exported directly without changes)\r\n\r\nconst Stream = Most.Stream\r\n// @alias: `of`\r\nconst just = Most.just\r\nconst empty = Most.empty\r\nconst never = Most.never\r\nconst from = Most.from\r\nconst periodic = Most.periodic\r\nconst drain = Most.drain\r\nconst join = Most.join\r\nconst mergeArray = Most.mergeArray\r\nconst switchLatest = Most.switchLatest\r\nconst skipRepeats = Most.skipRepeats\r\nconst timestamp = Most.timestamp\r\nconst fromPromise = Most.fromPromise\r\nconst awaitPromises = Most.awaitPromises\r\nconst throwError = Most.throwError\r\nconst multicast = Most.multicast\r\n\r\n\r\n// @binary functions (exported after being modified with `curry2`)\r\n\r\n// @alias: `forEach`\r\nconst observe = curry2(Most.observe)\r\nconst unfold = curry2(Most.unfold)\r\nconst iterate = curry2(Most.iterate)\r\n// @changed: wrap variadic function with binary function to handle injecting a single arg\r\nconst generate = curry2((generator, arg) => Most.generate(generator, arg))\r\n// @new: wrap variadic function with binary function to handle injecting multiple args\r\nconst generateArray = curry2((generator, argsArray) => Most.generate(generator, ...argsArray))\r\nconst concat = curry2(Most.concat)\r\nconst startWith = curry2(Most.startWith)\r\nconst map = curry2(Most.map)\r\nconst constant = curry2(Most.constant)\r\nconst tap = curry2(Most.tap)\r\nconst ap = curry2(Most.ap)\r\nconst transduce = curry2(Most.transduce)\r\nconst chain = curry2(Most.chain)\r\nconst continueWith = curry2(Most.continueWith)\r\nconst concatMap = curry2(Most.concatMap)\r\nconst mergeConcurrently = curry2(Most.mergeConcurrently)\r\n// @changed: wrap variadic function with binary function to handle merging two streams\r\nconst merge = curry2((stream1, stream2) => Most.mergeArray([stream1, stream2]))\r\nconst combineArray = curry2(Most.combineArray)\r\nconst sampleWith = curry2(Most.sampleWith)\r\n// @new: exported by most.js, but doesn't have documentation or defined types\r\nconst zipArray = curry2(Most.zipArray)\r\nconst filter = curry2(Most.filter)\r\nconst skipRepeatsWith = curry2(Most.skipRepeatsWith)\r\nconst take = curry2(Most.take)\r\nconst skip = curry2(Most.skip)\r\nconst takeWhile = curry2(Most.takeWhile)\r\nconst skipWhile = curry2(Most.skipWhile)\r\nconst skipAfter = curry2(Most.skipAfter)\r\nconst until = curry2(Most.until)\r\nconst since = curry2(Most.since)\r\nconst during = curry2(Most.during)\r\nconst delay = curry2(Most.delay)\r\nconst throttle = curry2(Most.throttle)\r\nconst debounce = curry2(Most.debounce)\r\n// @aliases: `flatMapError`, `chainError`\r\nconst recoverWith = curry2(Most.recoverWith)\r\n// @changed: wrap variadic function with binary function to handle case without capture \r\nconst fromEvent = curry2((eventType, source) => Most.fromEvent(eventType, source, false))\r\n// @new: only available in most.js as a Stream method, but added for convenience\r\nconst subscribe = curry2((observer, stream) => stream.subscribe(observer))\r\n\r\n\r\n// @trinary functions (exported after being modified with `curry3`)\r\n\r\nconst loop = curry3(Most.loop)\r\nconst scan = curry3(Most.scan)\r\nconst reduce = curry3(Most.reduce)\r\n// @new: exported by most.js, but doesn't have documentation or defined types\r\nconst sampleArray = curry3(Most.sampleArray)\r\nconst slice = curry3(Most.slice)\r\nconst PropagateTask = curry3(Most.PropagateTask)\r\n// @changed: wrap variadic function with trinary function to handle combining two streams\r\nconst combine = curry3((f, stream1, stream2) => Most.combineArray(f, [stream1, stream2]))\r\n// @changed: wrap variadic function with trinary function to handle zipping two streams\r\nconst zip = curry3((f, stream1, stream2) => Most.zipArray(f, [stream1, stream2]))\r\n// @new: wrap variadic function with trinary function to handle case with capture \r\nconst fromEventWithCapture = curry3(\r\n  (eventType, source, capture) => Most.fromEvent(eventType, source, capture)\r\n)\r\n\r\n\r\n// Functions are exported here in the same order they are exported in:\r\n// https://github.com/cujojs/most/blob/master/src/index.js\r\nexport {\r\n  Stream,\r\n  // of: just,\r\n  just,\r\n  empty,\r\n  never,\r\n  from,\r\n  periodic,\r\n  fromEvent,\r\n  fromEventWithCapture,\r\n  observe,\r\n  // forEach: observe,\r\n  drain,\r\n  loop,\r\n  scan,\r\n  reduce,\r\n  unfold,\r\n  iterate,\r\n  generate,\r\n  generateArray,\r\n  concat,\r\n  startWith,\r\n  map,\r\n  constant,\r\n  tap,\r\n  ap,\r\n  transduce,\r\n  chain,\r\n  join,\r\n  continueWith,\r\n  concatMap,\r\n  mergeConcurrently,\r\n  merge,\r\n  mergeArray,\r\n  combine,\r\n  combineArray,\r\n  sampleArray,\r\n  sampleWith,\r\n  zip,\r\n  zipArray,\r\n  switchLatest, \r\n  filter,\r\n  skipRepeats,\r\n  skipRepeatsWith,\r\n  take,\r\n  skip,\r\n  slice,\r\n  takeWhile,\r\n  skipWhile,\r\n  skipAfter,\r\n  until,\r\n  since,\r\n  during,\r\n  delay,\r\n  timestamp,\r\n  throttle,\r\n  debounce,\r\n  fromPromise,\r\n  awaitPromises,\r\n  recoverWith,\r\n  // flatMapError: recoverWith,\r\n  // chainError: recoverWith,\r\n  throwError,\r\n  multicast,\r\n  defaultScheduler,\r\n  PropagateTask,\r\n  subscribe, \r\n}\r\n"],"names":["const","defaultScheduler","Most.defaultScheduler","Stream","Most.Stream","just","Most.just","empty","Most.empty","never","Most.never","from","Most.from","periodic","Most.periodic","drain","Most.drain","join","Most.join","mergeArray","Most.mergeArray","switchLatest","Most.switchLatest","skipRepeats","Most.skipRepeats","timestamp","Most.timestamp","fromPromise","Most.fromPromise","awaitPromises","Most.awaitPromises","throwError","Most.throwError","multicast","Most.multicast","observe","Most.observe","unfold","Most.unfold","iterate","Most.iterate","generate","Most.generate","concat","Most.concat","startWith","Most.startWith","map","Most.map","constant","Most.constant","tap","Most.tap","ap","Most.ap","transduce","Most.transduce","chain","Most.chain","continueWith","Most.continueWith","concatMap","Most.concatMap","mergeConcurrently","Most.mergeConcurrently","combineArray","Most.combineArray","sampleWith","Most.sampleWith","zipArray","Most.zipArray","filter","Most.filter","skipRepeatsWith","Most.skipRepeatsWith","take","Most.take","skip","Most.skip","takeWhile","Most.takeWhile","skipWhile","Most.skipWhile","skipAfter","Most.skipAfter","until","Most.until","since","Most.since","during","Most.during","delay","Most.delay","throttle","Most.throttle","debounce","Most.debounce","recoverWith","Most.recoverWith","fromEvent","Most.fromEvent","loop","Most.loop","scan","Most.scan","reduce","Most.reduce","sampleArray","Most.sampleArray","slice","Most.slice","PropagateTask","Most.PropagateTask"],"mappings":"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"}